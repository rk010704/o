#include<stdio.h>
#include<stdlib.h>
int max=199;
void main(){
int direction,rq[max],initial,i,headm=0,n,min,m,headb;
printf("\nEnter the No Request\n");
scanf("%d",&n);
printf("\nEnter the sequence\n");
for ( i = 0; i <n; i++)
scanf("%d",&rq[i]);
printf("\nEnter the initial\n");
scanf("%d",&initial);
printf("\nEnter head direction\n1:Left\n2:Right\n");
scanf("%d",&direction);
if(direction==1){
m=rq[0];
for(i=1;i<n;i++){
if(m<=rq[i])
m=rq[i];
}headb=initial+m;
printf("\nTotal left HeadMovement %d ",headb);
}else{
min=rq[0];
for(i=1;i<n;i++){
if(min>=rq[i])
min=rq[i];
}
headm=max-initial+max-min;
printf("\nTotal right HeadMovement %d ",headm);
}
}






#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <limits.h>
#define ARRAY_SIZE 1000
int main(int argc, char** argv)
{int rank, size, i;
int local_max = INT_MIN;
int global_max;
int array[ARRAY_SIZE];
MPI_Init(NULL, NULL);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
for (i = 0; i < ARRAY_SIZE; i++)
{
array[i] = rand();
}
for (i = 0; i < ARRAY_SIZE / size; i++)
{
if (array[i] > local_max)
{
local_max = array[i];
}
}
MPI_Reduce(&local_max, &global_max, 1, MPI_INT,
MPI_COMM_WORLD);
if (rank == 0)
{
printf("Global maximum value = %d\n", global_max);
}
MPI_MAX,
0,
MPI_Finalize();
return 0;
}
